Dla chętnych do pracy:
- Dodać szablony klas aplikacji
	Każda tabela w bazie danych będzie miała swoją reprezentację w postaci klasy-modelu i klasy-repozytorium
	Np. dla tabeli Elem w katalogu app tworzymy klasę Elem w pliku Elem.php i klasę ElemRepo w pliku ElemRepo.php
	Klasa Elem dziedziczy wtedy po klasie Model (class Elem extends Model), w podobny sposób ElemRepo dziedziczy po Rep
	klasy mają być na razie puste, bez metod i zmiennych, chodzi jedynie o szablony
- Do wymyślenia sposób, w który będziemy obsługiwać moduły aplikacji
	czysto teoretyczne zagadnienie
	rozpisanie tego w sposób zrozumiały dla reszty zespołu przy założeniu, że poddamy to w dyskusję i ustalimy wspólny kierunek
	przyda się do API dla mobilnej aplikacji
- Przetestowanie klasy obsługi bazy danych (DB, katalog sys/DB.php)
	czy w ogóle działa
	dane testowe w bazie - jak coś to pytać o dane dostępowe
- Rozszerzenie klasy DB o kilka funkcji
	zwracanie par klucz=>wartość
	zwracanie par klucz=>array(w1, w2, ...)
	'zwykłe' zapytanie
	insert
	delete
- Odrozgrzebanie klasy renderowania widoków
	zadanie raczej @Maxx, totalny hardcore, jak coś to pytać
	zamiast metody bąbelkowej (każdy obiekt ma co najwyżej jeden folder) metoda ze stosem przetworzonych już ścieżek i stron
- Dodanie do widoków obsługi przekazania (nadpisania) parametrów z GET, POST, URI
	dodanie metody $this->var(typ, array zmienne)
	dodanie metody $this->varIsSet(-- '' --)
	sprawdzać najpierw $this->param w obu czy zmienna istnieje, dopiero potem odwoływać się do CMS::var/varIsSet
- Obsługa przekierowań na strony obsługi błędów
	* wysyłanie odpowiednich nagłówków do przeglądarki
	* użycie ob_end_clean() w odpowiednim miejscu; Google => 'PHP output buffering'
	wymyślić jak wyświetlić błąd (np 404) jeżeli mamy już coś w buforze
- Rozpisać schemat bazy danych w MySQL-u
	samo tworzenie tabel, bez danych
- Wymyślić i rozpisać (w jakimś pliku) wstępną hierarchię podstron
	czyli gdzie panel usera, gdzie wyświetlamy listę zadań, jak konwersacje, itd.
	po akceptacji przez zespół utworzyć poszczególne pliki i katalogi w katalogu /view/


OPCJONALNIE (na później, dla ambitnych):
- System generowania cache dla całego projektu
	zapisywanie hierarchii klas, kolejności ich ładowania
	cache w bazie danych, wyświetlanie wcześniej wygenerowanych danych
